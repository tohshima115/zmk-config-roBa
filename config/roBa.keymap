#define ZMK_POINTING_DEFAULT_SCRL_VAL 80

#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mkp_input_listener { input-processors = <&zip_temp_layer 3 250>; };

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        Figma_Ctrl {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <19 20>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        change_US_to_JP: change_US_to_JP {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_WIN>,
                <&macro_tap>,
                <&kp SPACE>,
                <&macro_release>,
                <&kp LEFT_WIN>;

            // 左Altキーを離す

            label = "CHANGE_US_TO_JP";
        };

        win_sleep: win_sleep {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_WIN>,
                <&macro_tap>,
                <&kp X>,
                <&macro_release>,
                <&kp LEFT_WIN>,
                <&macro_tap>,
                <&kp U>,
                <&macro_tap>,
                <&kp S>;

            label = "WIN_SLEEP";
        };

        win_shutdown: win_shutdown {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_WIN>,
                <&macro_tap>,
                <&kp X>,
                <&macro_release>,
                <&kp LEFT_WIN>,
                <&macro_tap>,
                <&kp U>,
                <&macro_tap>,
                <&kp U>;

            label = "WIN_SHUTDOWN";
        };

        win_restart: win_restart {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_WIN>,
                <&macro_tap>,
                <&kp X>,
                <&macro_release>,
                <&kp LEFT_WIN>,
                <&macro_tap>,
                <&kp U>,
                <&macro_tap>,
                <&kp R>;

            label = "WIN_RESTART";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        encoder_msc_down_up: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;

            // タップでIME切替、ホールドでCapsLockになる新しい動作を定義
        };

        th_ime_caps: th_ime_caps {
            compatible = "zmk,behavior-hold-tap";
            label = "TH_IME_CAPS";
            bindings = <&kp>, <&change_US_to_JP>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        plus_eq: plus_eq {
            compatible = "zmk,behavior-mod-morph";
            label = "PLUS_EQ";
            bindings = <&kp LS(SEMICOLON)>, <&kp LS(MINUS)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        minus_underscore: minus_underscore {
            compatible = "zmk,behavior-mod-morph";
            label = "MINUS_UNDERSCORE";
            bindings = <&kp MINUS>, <&kp RS(INT_RO)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        colon_semicolon: colon_semicolon {
            compatible = "zmk,behavior-mod-morph";
            label = "COLON_SEMICOLON";
            bindings = <&kp SQT>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q         &kp L  &kp U     &kp COMMA      &kp PERIOD                                               &kp F        &kp W    &kp R  &kp Y  &kp P
&kp E         &kp I  &kp A     &kp O          &minus_underscore  &kp LS(LG(S))       &kp SLASH         &kp K        &kp T    &kp N  &kp S  &kp H
&kp LEFT_ALT  &kp Z  &kp C     &kp V          &kp TAB            &lt 6 GRAVE         &colon_semicolon  &kp G        &lt 4 D  &kp M  &kp J  &lt 5 B
&kp LEFT_WIN  &kp X  &plus_eq  &kp BACKSPACE  &lt 2 SPACE        &kp LEFT_SHIFT      &kp LEFT_CONTROL  &lt 1 ENTER                         &kp RIGHT_ALT
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        NUM {
            bindings = <
&kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp LS(N8)         &kp LEFT_PARENTHESIS                                                  &kp LS(NUMBER_1)  &kp LS(LEFT_BRACE)  &kp LS(N7)     &kp LS(NUMBER_2)  &kp LS(NUMBER_6)
&kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp RIGHT_BRACKET  &kp NON_US_HASH       &kp LC(LA(KP_NUMBER_0))      &kp DOUBLE_QUOTES  &kp LS(INT3)      &kp INT_RO          &kp LS(EQUAL)  &kp F2            &kp INTERNATIONAL_3
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp RIGHT_BRACE    &kp LS(NON_US_HASH)   &kp GRAVE                    &trans             &trans            &trans              &trans         &trans            &kp LS(NUMBER_4)
&kp NUMBER_0  &kp PERCENT   &kp HASH      &kp DELETE         &kp LS(SPACE)         &kp LEFT_BRACKET             &trans             &trans                                                                 &trans
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE  &kp LS(TAB)             &kp LC(RS(UP_ARROW))    &kp TAB                  &kp F2                       &trans   &kp F5    &kp UP    &kp F12    &trans
&kp HOME    &kp LC(RS(LEFT_ARROW))  &kp LC(RS(DOWN_ARROW))  &kp LC(RS(RIGHT_ARROW))  &kp END  &trans      &trans  &trans   &kp LEFT  &kp DOWN  &kp RIGHT  &trans
&trans      &trans                  &trans                  &trans                   &trans   &trans      &kp F6  &trans   &trans    &trans    &trans     &trans
&trans      &trans                  &trans                  &trans                   &trans   &trans      &kp F7  &kp F10                                 &trans
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        MOUSE {
            bindings = <
&trans        &trans  &trans  &kp LA(LEFT_ARROW)  &kp LA(RIGHT_ARROW)                              &trans  &trans    &mkp MB3  &trans  &trans
&trans        &trans  &trans  &trans              &mkp MB2             &trans              &trans  &trans  &mkp MB1  &trans    &trans  &trans
&kp LEFT_ALT  &trans  &trans  &trans              &trans               &trans              &trans  &trans  &trans    &trans    &trans  &trans
&trans        &trans  &trans  &trans              &trans               &kp LEFT_SHIFT      &trans  &trans                              &trans
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        DESIGN {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        Bluetooth {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &bt BT_CLR   &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &trans
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };

        Utility {
            bindings = <
&trans  &trans  &kp K_MUTE  &kp C_VOL_DN  &kp C_VOLUME_UP                            &trans         &trans  &trans  &trans  &trans
&trans  &trans  &trans      &trans        &trans           &trans      &trans        &trans         &trans  &trans  &trans  &trans
&trans  &trans  &trans      &trans        &trans           &trans      &win_restart  &trans         &trans  &trans  &trans  &trans
&trans  &trans  &trans      &trans        &trans           &trans      &win_sleep    &win_shutdown                          &trans
            >;
        };
    };
};
