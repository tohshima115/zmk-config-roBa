#define ZMK_POINTING_DEFAULT_SCRL_VAL 80

#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mkp_input_listener { input-processors = <&zip_temp_layer 3 250>; };

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        change_US_to_JP: change_US_to_JP {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_WIN &kp SPACE>;
            label = "CHANGE_US_TO_JP";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        encoder_msc_down_up: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q         &kp L    &kp U         &kp COMMA      &kp PERIOD                                           &kp F        &kp W    &kp R  &kp Y  &kp P
&kp E         &kp I    &kp A         &kp O          &kp MINUS    &kp LS(LG(S))         &kp SLASH         &kp K        &kp T    &kp N  &kp S  &kp H
&kp Z         &kp X    &kp C         &kp V          &kp PLUS     &change_US_to_JP      &kp COLON         &kp G        &lt 4 D  &kp M  &kp J  &lt 5 B
&kp LEFT_ALT  &kp TAB  &kp LEFT_WIN  &kp BACKSPACE  &lt 2 SPACE  &kp LEFT_SHIFT        &kp LEFT_CONTROL  &lt 1 ENTER                         &kp ESC
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        NUM {
            bindings = <
&kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp LPAR   &kp RPAR                                                  &trans  &kp EXCLAMATION  &kp DOLLAR      &kp AMPERSAND  &trans
&kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp LBKT   &kp RBKT          &kp LC(LA(KP_NUMBER_0))      &kp ASTRK  &trans  &kp MINUS        &kp UNDERSCORE  &kp TILDE      &trans
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp LBRC   &kp RBRC          &kp AT                       &trans     &trans  &kp SLASH        &kp PIPE        &kp BACKSLASH  &trans
&kp NUMBER_0  &kp HASH      &kp PERCENT   &kp GRAVE  &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES            &trans     &trans                                                  &trans
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE  &kp LS(TAB)         &kp LC(UP_ARROW)    &kp TAB              &trans                       &trans  &trans    &kp UP    &trans     &trans
&kp HOME    &kp LC(LEFT_ARROW)  &kp LC(DOWN_ARROW)  &kp LC(RIGHT_ARROW)  &kp END  &trans      &trans  &trans  &kp LEFT  &kp DOWN  &kp RIGHT  &trans
&trans      &trans              &trans              &trans               &trans   &trans      &trans  &trans  &trans    &trans    &trans     &trans
&trans      &trans              &trans              &trans               &trans   &trans      &trans  &trans                                 &trans
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        MOUSE {
            bindings = <
&trans        &trans  &trans  &trans  &trans                              &trans  &trans    &trans    &trans    &trans
&trans        &trans  &trans  &trans  &trans  &trans              &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans        &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans    &trans    &trans    &trans
&kp LEFT_ALT  &trans  &trans  &trans  &trans  &kp LEFT_SHIFT      &trans  &trans                                &trans
            >;
        };

        DESIGN {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
